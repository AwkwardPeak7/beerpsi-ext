apply plugin: 'io.gitlab.arturbosch.detekt'

assert !ext.has("pkgNameSuffix")
assert !ext.has("libVersion")

android {
    compileSdkVersion AndroidConfig.compileSdk

    namespace "io.github.beerpsi.tachiyomi.extension"
    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        release {
            manifest.srcFile "AndroidManifest.xml"
        }
        debug {
            manifest.srcFile "AndroidManifest.xml"
        }
    }

    defaultConfig {
        minSdkVersion AndroidConfig.minSdk
        targetSdkVersion AndroidConfig.targetSdk
        applicationIdSuffix project.parent.name + "." + project.name
        versionCode extVersionCode
        versionName "1.4.$versionCode"
        base {
            archivesName = "tachiyomi-$applicationIdSuffix-v$versionName"
        }

        manifestPlaceholders = [
            appName: "Tachiyomi: $extName",
            extClass: extClass,
            nsfw: project.ext.properties.getOrDefault("isNsfw", false) ? 1 : 0,
        ]
    }

    signingConfigs {
        release {
            storeFile rootProject.file("signingkey.jks")
            storePassword System.getenv("KEY_STORE_PASSWORD")
            keyAlias System.getenv("ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
        }
    }

    dependenciesInfo {
        includeInApk = false
    }

    buildFeatures {
        // Disable unused AGP features
        aidl false
        renderScript false
        resValues false
        shaders false
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-opt-in=kotlinx.serialization.ExperimentalSerializationApi"
    }
}

detekt {
    buildUponDefaultConfig = true
    parallel = true
    autoCorrect = false
    ignoreFailures = false
    config.setFrom(files("$rootDir/config/detekt/detekt.yml"))
    source = files("src")
}

tasks.named("detekt").configure {
    include "**/*.kt"
    exclude("**/resources/**", "**/build/**", "**/generated/**", "**/*.kts")
    reports {
        html.required.set(true)
        xml.required.set(false)
        txt.required.set(false)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(":core"))
    compileOnly(libs.bundles.common)
}

tasks.register("writeManifestFile") {
    doLast {
        def manifest = android.sourceSets.getByName("main").manifest
        if (!manifest.srcFile.exists()) {
            File tempFile = layout.buildDirectory.get().file("tempAndroidManifest.xml").getAsFile()
            if (!tempFile.exists()) {
                tempFile.withWriter {
                    it.write('<?xml version="1.0" encoding="utf-8"?>\n<manifest />\n')
                }
            }
            manifest.srcFile(tempFile.path)
        }
    }
}

preBuild.dependsOn(writeManifestFile, tasks.named("detekt"))
